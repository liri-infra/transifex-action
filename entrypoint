#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2020 Pier Luigi Fiorini <pierluigi.fiorini@liri.io>
#
# SPDX-License-Identifier: MIT

import glob
import os
import subprocess
import tempfile


def run(args):
    print('+ ' + ' '.join(map(repr, args)))
    return subprocess.run(args, check=True)


def main():
    github_repository = os.environ['GITHUB_REPOSITORY']
    tx_token = os.environ.get('INPUT_TX_TOKEN') or os.environ.get('TX_TOKEN')
    ssh_key = os.environ.get('INPUT_SSH_KEY')
    translations_folder = os.environ.get('INPUT_TRANSLATIONS_FOLDER')
    committer_email = os.environ.get('INPUT_COMMITTER_EMAIL', 'git-action@transifex.com')
    committer_name = os.environ.get('INPUT_COMMITTER_NAME', 'Transifex Github action')
    pull_translations = os.environ.get('INPUT_PULL_TRANSLATIONS', 'false') == 'true'
    push_sources = os.environ.get('INPUT_PUSH_SOURCES', 'false') == 'true'
    try:
        minimum_perc = int(os.environ.get('INPUT_MINIMUM_PERC', '0'))
    except ValueError:
        minimum_perc = 0

    args = []
    if minimum_perc > 0:
        args.append(f'--minimum-perc={minimum_perc}')

    # Set TX_TOKEN
    if tx_token:
        os.environ['TX_TOKEN'] = tx_token

    # Save ssh key
    ssh_tempfile = ''
    if ssh_key:
        fd, ssh_tempfile = tempfile.mkstemp()
        with open(ssh_tempfile, 'w') as f:
            f.write(ssh_key)

    # Configure email and name
    subprocess.check_output(['git', 'config', '--local', 'user.email', committer_email])
    subprocess.check_output(['git', 'config', '--local', 'user.name', committer_name])

    # Default push policy
    subprocess.check_output(['git', 'config', 'push.default', 'simple'])

    # Git checkout action does a shallow clone. That prevents us to
    # access common history of branches
    run(['git', 'fetch', '--unshallow'])

    # Push and pull
    if pull_translations:
        pull_args = ['tx', 'pull', '--no-interactive', '--force', '--all']
        run(pull_args + args)
    if push_sources:
        run(['tx', 'push', '--no-interactive', '--source'])

    # Add files
    paths = glob.glob(translations_folder, recursive=True)
    for path in paths:
        run(['git', 'add', path])

    # Commit
    if ssh_tempfile:
        os.environ['GIT_SSH_COMMAND'] = f'ssh -i {ssh_tempfile} -o StrictHostKeyChecking=no'
        run(['git', 'remote', 'set-url', '--push', 'origin', f'git@github.com:{github_repository}'])
    msg = 'Automatic merge of Transifex translations\n\n[ci skip]'
    run(['git', 'commit', '--message=' + msg])
    run(['git', 'push'])


if __name__ == '__main__':
    main()
